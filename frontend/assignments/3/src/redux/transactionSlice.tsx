import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { getTransactions } from "../thunks/getTransactions";

// Generated by https://quicktype.io

export interface Transaction {
  stock_name: StockName;
  stock_symbol: StockSymbol;
  transaction_price: number;
  timestamp: string;
  status: Status;
}

export enum Status {
  Failed = "Failed",
  Passed = "Passed",
}

export enum StockName {
  BakerSmith = "Baker-Smith",
  BellWaller = "Bell-Waller",
  FordAndSons = "Ford and Sons",
  GrayLtd = "Gray Ltd",
  HernandezTaylor = "Hernandez-Taylor",
  LEAndSons = "Le and Sons",
  LEBakerAndRoberts = "Le, Baker and Roberts",
  MclaughlinJonesAndJones = "Mclaughlin, Jones and Jones",
  MillerHernandezAndThomas = "Miller, Hernandez and Thomas",
  MillerWright = "Miller-Wright",
  MorganPLC = "Morgan PLC",
  NelsonAndSons = "Nelson and Sons",
  NovakAndSons = "Novak and Sons",
  OwensErickson = "Owens-Erickson",
  PalmerWood = "Palmer-Wood",
  RossMuellerAndWalker = "Ross, Mueller and Walker",
  SmithRivera = "Smith-Rivera",
  StuartJonesAndWhite = "Stuart, Jones and White",
  WheelerKellyAndLucas = "Wheeler, Kelly and Lucas",
  WrightRoss = "Wright-Ross",
}

export enum StockSymbol {
  Bak = "BAK",
  Bel = "BEL",
  For = "FOR",
  Gra = "GRA",
  Her = "HER",
  LE = "LE,",
  Mcl = "MCL",
  Mil = "MIL",
  Mor = "MOR",
  Nel = "NEL",
  Nov = "NOV",
  Owe = "OWE",
  Pal = "PAL",
  Ros = "ROS",
  Smi = "SMI",
  StockSymbolLE = "LE ",
  Stu = "STU",
  Whe = "WHE",
  Wri = "WRI",
}

interface TransactionsState {
  transactions: Transaction[];
  filteredTransactions: Transaction[];
  state: "pending" | "fulfilled" | "rejected";
  error: string | null;
}

const initialState: TransactionsState = {
  transactions: [],
  filteredTransactions: [],
  state: "pending",
  error: null,
};

const transactionSlice = createSlice({
  name: "transactionSlice",
  initialState,
  reducers: {
    setTransactions: (state, action: PayloadAction<Transaction[]>) => {
      state.transactions = action.payload;
    },

    setFilteredTransactions: (state, action: PayloadAction<Transaction[]>) => {
      state.filteredTransactions = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getTransactions.pending, (state) => {
        state.state = "pending";
      })
      .addCase(
        getTransactions.fulfilled,
        (state, action: PayloadAction<Transaction[]>) => {
          state.state = "fulfilled";
          state.transactions = action.payload;
          state.filteredTransactions = [];
        }
      )
      .addCase(getTransactions.rejected, (state) => {
        state.state = "rejected";
        state.error = "Failed to fetch products";
      });
  },
});

export const { setTransactions, setFilteredTransactions } =
  transactionSlice.actions;

export default transactionSlice.reducer;
